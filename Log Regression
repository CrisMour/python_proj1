import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
iris = load_iris()        # Load dataset
from sklearn.model_selection import train_test_split
train_set, test_set, train_labels, test_labels = train_test_split(
                              iris.data,               # features
                              iris.target,             # labels
                              test_size = 0.25,          # split ratio
                              random_state = 1,          # set random seed
                              stratify = iris.target)  # randomize based on labels
from sklearn import linear_model
x = train_set[:,0:30]         # mean radius
y = train_labels              # 0: malignant, 1: benign

log_regress = linear_model.LogisticRegression(max_iter = 3000)
log_regress.fit(X = x, y = y)
#---get the accuracy of the prediction---
print("---Accuracy---")
print(log_regress.score(X = test_set ,
                        y = test_labels))
#Testing
import pandas as pd

#---get the predicted probablities and convert into a dataframe---
preds_prob = pd.DataFrame(log_regress.predict_proba(X=test_set))

#---assign column names to prediction---
preds_prob.columns = ["setosa", "versicolor", "virginica"]

#---get the predicted class labels---
preds = log_regress.predict(X=test_set)
preds_class = pd.DataFrame(preds)
preds_class.columns = ["Prediction"]

#---actual diagnosis---
original_result = pd.DataFrame(test_labels)
original_result.columns = ["Original Result"]

#---merge the three dataframes into one---
result = pd.concat([preds_prob, preds_class, original_result], axis=1)
# View summary of common classification metrics
from sklearn import metrics
print("---Hamming---")
print(metrics.hamming_loss(original_result, preds, sample_weight=None))
print("---MSE---")
print(metrics.mean_squared_error(original_result, preds, sample_weight=None, multioutput='uniform_average', squared=True))
print("---Metrices---")
print(metrics.classification_report(
      y_true = test_labels,
      y_pred = preds))
HammingN1C1=metrics.hamming_loss(original_result, preds, sample_weight=None)
MSEN1C1=metrics.mean_squared_error(original_result, preds, sample_weight=None, multioutput='uniform_average', squared=True)
F1N1C1=metrics.f1_score(original_result, preds, average='weighted')
AccuracyN1C1=log_regress.score(X = test_set,y = test_labels)
